#!/bin/bash

# ============================
# INSTALL.SH ‚Äì Sentinel Layer 
# ============================

YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${YELLOW}==> [Sentinel] $1${NC}"
}

read -p "Souhaitez-vous (r√©)installer les outils et d√©pendances ? (y/n) " install_tools
if [[ "${install_tools,,}" != "y" ]]; then
    log "Installation annul√©e."
    exit 0
fi

log "Mise √† jour du syst√®me..."
if ! sudo apt update && sudo apt upgrade -y; then
    log "‚ùå √âchec de la mise √† jour du syst√®me."
    exit 1
fi

install_if_needed() {
    local pkg=$1
    if ! dpkg -l | grep -qw "$pkg"; then
        log "Installation de $pkg..."
        if ! sudo apt install -y "$pkg"; then
            log "‚ùå Erreur lors de l'installation de $pkg."
            exit 1
        fi
    else
        log "$pkg d√©j√† install√©, saut..."
    fi
}

log "Installation des outils n√©cessaires..."
tools=(
    build-essential git cmake curl wget zsh python3-pip
    nmap net-tools tcpdump tshark whois aircrack-ng nikto sqlmap
    iperf3 iftop htop unzip arp-scan hydra john lynis bat neofetch
    libopenblas-dev libcurl4-openssl-dev libomp-dev pkg-config
)
for tool in "${tools[@]}"; do
    install_if_needed "$tool"
done

log "Installation de Oh My Zsh..."
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    RUNZSH=no CHSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
    log "Oh My Zsh est d√©j√† install√©, saut..."
fi

log "Clonage de enum4linux..."
mkdir -p ~/sentinel/tools
if [ ! -d "$HOME/sentinel/tools/enum4linux/.git" ]; then
    if ! git clone https://github.com/CiscoCXSecurity/enum4linux.git ~/sentinel/tools/enum4linux; then
        log "‚ùå √âchec du clonage de enum4linux."
        exit 1
    fi
else
    log "enum4linux d√©j√† clon√©, saut..."
fi

log "Installation de nuclei..."
ARCH=$(dpkg --print-architecture)

if [[ "$ARCH" == "arm64" ]]; then
    if ! wget -nc https://github.com/projectdiscovery/nuclei/releases/download/v3.4.3/nuclei_3.4.3_linux_arm64.zip; then
        log "‚ùå √âchec du t√©l√©chargement de nuclei (ARM64)."
        exit 1
    fi
    unzip -o nuclei_3.4.3_linux_arm64.zip
    sudo mv nuclei /usr/local/bin/
    chmod +x /usr/local/bin/nuclei
    rm nuclei_3.4.3_linux_arm64.zip
else
    NUCLEI_URL="https://github.com/projectdiscovery/nuclei/releases/latest/download/nuclei_${ARCH}.deb"
    if ! wget -nc "$NUCLEI_URL" -O nuclei.deb || ! sudo dpkg -i nuclei.deb; then
        log "‚ö†Ô∏è Erreur d'installation de nuclei, essaie manuellement."
    fi
fi

log "Configuration banni√®re Zsh..."
if ! grep -q "Sentinel ASCII Banner" ~/.zshrc; then
cat <<'EOF' >> ~/.zshrc

# Sentinel ASCII Banner
echo ""
echo "‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñÄ     ‚ñà     ‚ñÄ‚ñà‚ñà‚ñà‚ñÄ  ‚ñÑ‚ñà‚ñÑ‚ñÄ          ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà "
echo "  ‚ñÄ‚ñà‚ñà     ‚ñÑ‚ñà‚ñà     ‚ñÑ‚ñà  ‚ñÑ‚ñà‚ñÄ             ‚ñà‚ñÄ   ‚ñà‚ñà   ‚ñÄ‚ñà ‚ñà‚ñà    ‚ñÄ‚ñà "
echo "   ‚ñà‚ñà‚ñÑ   ‚ñÑ‚ñà‚ñà‚ñà‚ñÑ   ‚ñÑ‚ñà  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ      ‚ñÑ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà   "
echo "    ‚ñà‚ñà‚ñÑ  ‚ñà‚ñÄ ‚ñà‚ñà‚ñÑ  ‚ñà‚ñÄ  ‚ñà‚ñà‚ñÄ  ‚ñÄ‚ñà‚ñà‚ñÑ   ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   "
echo "    ‚ñÄ‚ñà‚ñà ‚ñà‚ñÄ  ‚ñÄ‚ñà‚ñà ‚ñà‚ñÄ   ‚ñà‚ñà     ‚ñà‚ñà ‚ñÑ‚ñà‚ñÄ ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà  ‚ñÑ"
echo "     ‚ñÑ‚ñà‚ñà‚ñÑ    ‚ñÑ‚ñà‚ñà‚ñÑ    ‚ñà‚ñà‚ñÑ   ‚ñÑ‚ñà‚ñà‚ñà‚ñÄ   ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà     ‚ñÑ‚ñà"
echo "      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"
echo "                                   ‚ñà‚ñà                       "
echo "                                   ‚ñà‚ñà                       "
echo ""
echo "                    Welcome to Sentinel OS                 "
echo "------------------------------------------------------------"
echo ""

# Alias Outils
alias sniff='sudo tcpdump -i any'
alias live='sudo iftop'
alias scan='nmap -sV -T4'
alias vuln='nikto -host'

# Fonction Sentinel
sentinel() {
~/sentinel/run.sh "$@"
}

# Alias Sentinel
alias sentinel='~/sentinel/run.sh'
alias sentinel-help='cat ~/sentinel/docs/tools_doc.txt'
alias sentinel-system='neofetch --cpu_temp --gpu_temp'

EOF
fi

log "Changement de shell vers Zsh..."
chsh -s "$(which zsh)"

mkdir -p ~/sentinel

log "Clonage de llama.cpp..."
if [ ! -d "$HOME/sentinel/llama.cpp/.git" ]; then
    if ! git clone https://github.com/ggerganov/llama.cpp.git ~/sentinel/llama.cpp; then
        log "‚ùå √âchec du clonage de llama.cpp."
        exit 1
    fi
else
    log "llama.cpp d√©j√† clon√©, saut..."
fi

log "Compilation de llama.cpp..."
cd ~/sentinel/llama.cpp
mkdir -p build && cd build

if ! cmake .. -DLLAMA_BLAS=ON -DLLAMA_BLAS_VENDOR=OpenBLAS -DLLAMA_CURL=ON; then
    log "‚ùå Erreur CMake."
    exit 1
fi

if ! make -j$(nproc); then
    log "‚ùå Erreur compilation make."
    exit 1
fi

if ! ls ./bin/llama-* 1> /dev/null 2>&1; then
    log "‚ùå Aucun binaire 'llama-*' trouv√©."
    exit 1
else
    log "‚úÖ Compilation r√©ussie."
fi

log "T√©l√©chargement du mod√®le Phi-1.5 GGUF (q4_0)..."
mkdir -p ~/sentinel/models
cd ~/sentinel/models

if [ -f "phi-1.5.gguf" ]; then
    log "Mod√®le d√©j√† pr√©sent, saut du t√©l√©chargement."
else
    if ! curl -L -o phi-1.5.gguf https://huggingface.co/TheBloke/phi-1.5-GGUF/resolve/main/phi-1.5.Q4_0.gguf; then
        log "‚ùå √âchec du t√©l√©chargement du mod√®le Phi-1.5."
        exit 1
    fi

    if ! head -c 4 phi-1.5.gguf | grep -q "GGUF"; then
        log "‚ùå Fichier t√©l√©charg√© invalide (pas un mod√®le GGUF ?)."
        exit 1
    fi
fi

log "Cr√©ation du script run.sh..."
cat <<'EOF' > ~/sentinel/run.sh
#!/bin/bash

MODEL_PATH="../../models/phi-1.5.gguf"
OUTPUT_PATH="output.txt"

if [ ! -d "$HOME/sentinel/llama.cpp/build" ]; then
    echo "‚ùå Le r√©pertoire de construction de Llama.cpp n'existe pas."
    exit 1
fi

cd "$HOME/sentinel/llama.cpp/build"

if ! ls ./bin/llama-* 1> /dev/null 2>&1; then
    echo "‚ùå Aucun binaire 'llama-*' trouv√©."
    exit 1
fi

BIN=$(ls ./bin/llama-* | head -n1)

if [ ! -f "$MODEL_PATH" ]; then
    echo "‚ùå Le mod√®le n'existe pas √† l'emplacement sp√©cifi√© : $MODEL_PATH"
    exit 1
fi

CTX_SIZE=1024            # Taille du contexte (plus grand pour mieux g√©rer les prompts longs)
N_PREDICT=128            # Nombre de tokens √† pr√©dire
TEMP=0.7                 # Temp√©rature pour le texte g√©n√©r√©
REPEAT_PENALTY=1.2       # P√©nalit√© de r√©p√©tition pour √©viter les boucles
PROMPT="SYSTEM: Vous √™tes Sentinel, une IA de cybers√©curit√© fonctionnant dans un OS Linux l√©ger. Vous √™tes un assistant en ligne de commande install√© sur un Raspberry Pi 4, con√ßu pour aider avec les audits, l'analyse forensique, la gestion de r√©seaux, le pentesting et l'administration Linux.

Vous r√©pondez toujours en fran√ßais, en utilisant un langage concis et technique, tout en acceptant les termes courants en cybers√©curit√© (par exemple : scan, port, payload, exploit, reverse shell). Vous ne traduisez pas ces termes.

Vous ne hallucinez jamais. Si quelque chose n'est pas clair, vous expliquez comment le v√©rifier. Vous fournissez toujours des exemples en ligne de commande lorsqu'ils sont utiles. Soyez professionnel, concis et pragmatique.

Environnement actuel : hors ligne, CPU ARM, m√©moire limit√©e, en fonctionnement uniquement dans le terminal."

$BIN -m "$MODEL_PATH" \
     --ctx-size "$CTX_SIZE" \
     --n-predict "$N_PREDICT" \
     --temp "$TEMP" \
     --repeat_penalty "$REPEAT_PENALTY" \
     -p "$PROMPT"
EOF

chmod +x ~/sentinel/run.sh

log "Cr√©ation de la documentation..."
mkdir -p ~/sentinel/docs
cat <<'EOF' > ~/sentinel/docs/tools_doc.txt
# Liste des Outils disponibles dans Sentinel

nmap : Scan r√©seau
tcpdump : Capture r√©seau
tshark : Wireshark CLI
whois : Infos domaine
aircrack-ng : S√©curit√© Wi-Fi
nikto : Vuln√©rabilit√©s Web
sqlmap : Injection SQL
iperf3 : Bande passante
iftop : Trafic r√©seau live
htop : Ressources syst√®me
unzip : D√©compression ZIP
arp-scan : D√©couverte r√©seau local
enum4linux : Enum√©ration syst√®mes Windows (clon√© localement)
hydra : Brute-force
john : Cracking de hash
lynis : Audit s√©curit√©
bat : cat am√©lior√©
mitmproxy : Interception HTTPS
nuclei : Scanner vuln√©rabilit√©s (via GitHub)
nmap : Vue global du systeme

# Liste des Alias disponibles dans Sentinel

## Alias pour la capture r√©seau et surveillance
- `sniff` : Lance tcpdump pour capturer tout le trafic r√©seau sur toutes les interfaces.
- `live` : Lance iftop pour afficher en temps r√©el la bande passante r√©seau.

## Alias pour les scans et tests de vuln√©rabilit√©
- `scan` : Lance un scan de ports et services sur une cible avec nmap.
- `vuln` : Lance un scan de vuln√©rabilit√©s sur un serveur web avec nikto.

## Alias pour l'interaction avec Sentinel
- `sentinel` : Lance l‚Äôassistant Sentinel (IA bas√©e sur un LLM).

## Alias pour afficher la documentation
- `sentinel-help` : Affiche la documentation des outils install√©s et des alias disponibles.

## Alias Overall Systeme
- `sentinel-system` : Vue global du syst√®me (avec la temp√©rature GPU/CPU)
EOF

chmod +x ~/sentinel/docs/tools_doc.txt

log "‚úÖ Installation termin√©e."
echo "üëâ Lance une nouvelle session ou tape 'source ~/.zshrc' pour activer les alias."
echo "üëâ Utilise 'sentinel-help' pour lire la documentation rapide."
echo ""
echo '     sentinel "Comment auditer un r√©seau interne ?"'
echo ""
